from datetime import datetime, timedelta
import tweepy
import time

# Your API keys and tokens
API_Key = 'API_Key'
API_Secret_Key = 'API_Secret_Key'
Access_Token = 'Access_Token'
Access_Token_Secret = 'Access_Token_Secret'

# Tweepy authorization
auth = tweepy.OAuth1UserHandler(API_Key, API_Secret_Key, Access_Token, Access_Token_Secret)
api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)

# API rate limits
MAX_RETWEETS_PER_15_MINUTES = 300
MAX_COMMENTS_PER_15_MINUTES = 75

# Track the time of the last API usage
last_retweet_time = datetime.now()
last_comment_time = datetime.now()

# Retweet the most recent tweet from each following every 10 hours
def auto_retweet_following():
    global last_retweet_time
    following = api.get_friend_ids()  # get list of following IDs
    retweet_count = 0
    
    for following_id in following:
        if retweet_count >= MAX_RETWEETS_PER_15_MINUTES:
            break
        try:
            # Get the most recent tweet of the following
            tweets = api.user_timeline(user_id=following_id, count=1)
            if tweets:
                tweet = tweets[0]
                api.retweet(tweet.id)
                retweet_count += 1
                print(f"Retweeted: {tweet.text} from {tweet.user.screen_name}") 
                time.sleep(5)  # sleep to avoid hitting rate limits
        except tweepy.TweepError as e:
            print(f"Error: {e.response}")

    last_retweet_time = datetime.now()

# Search for tweets with specific keywords among followers and following and auto-comment
def auto_comment_on_tweets(keyword_sets, comments, daily_limit=5):
    global last_comment_time

    followers_ids = api.get_follower_ids()  # get list of follower IDs
    following_ids = api.get_friend_ids()  # get list of following IDs
    all_ids = set(followers_ids + following_ids)

    comment_count = 0

    for user_id in all_ids:
        if comment_count >= min(daily_limit, MAX_COMMENTS_PER_15_MINUTES):
            break
        try:
            tweets = api.user_timeline(user_id=user_id, count=10)  # check the last 10 tweets for each user
            for tweet in tweets:
                for i, keywords in enumerate(keyword_sets):
                    if any(keyword.lower() in tweet.text.lower() for keyword in keywords):
                        api.update_status(status=comments[i], in_reply_to_status_id=tweet.id, auto_populate_reply_metadata=True)
                        comment_count += 1
                        print(f"Commented: '{comments[i]}' on tweet: {tweet.text}")
                        if comment_count >= min(daily_limit, MAX_COMMENTS_PER_15_MINUTES):
                            break
                if comment_count >= min(daily_limit, MAX_COMMENTS_PER_15_MINUTES):
                    break
            time.sleep(5)  # sleep to avoid hitting rate limits
        except tweepy.TweepError as e:
            print(f"Error: {e.response}")

    last_comment_time = datetime.now()

# Main loop to run retweeting every 10 hours and keyword commenting daily
while True:
    # Check if it's time to retweet (every 10 hours)
    if datetime.now() - last_retweet_time > timedelta(hours=10):
        auto_retweet_following()

    # Define your keyword sets and corresponding comments
    keyword_sets = [["keyword_sets1", "keyword_sets1.2"], ["keyword_sets2", "keyword_sets2.1"]]
    comments = ["comments1", "comments2"]

    # Auto-Comment based on the keyword sets
    auto_comment_on_tweets(keyword_sets=keyword_sets, comments=comments, daily_limit=5)

    # Sleep for 15 minutes between cycles to stay within rate limits
    time.sleep(15 * 60)
